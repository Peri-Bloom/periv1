# Group Requirements

## Purpose 

This specification describes the service endpoints and data-models used when querying an openEHR system. 
The [Archetype Query Language (AQL)](https://specifications.openehr.org/releases/QUERY/latest/AQL.html) is the primary query language. 


## Query types

<h3>Single EHR queries</h3>

A common use-case is to execute queries within a specific EHR. 
This is achieved by supplying a `ehr_id` query parameter or setting a `openEHR-EHR-id` request header. 

<h3>Population queries</h3>

Population queries are queries which are executed on several EHRs in the same request. Examples of use-cases can be: 
- Ward lists 
- Explore correlations between patients in a pandemic situation
- Research, e.g. epidemiology, population health

<h3>Stored queries</h3> 

Stored queries are queries which have their definition stored (registered) on the server. 
The queries will expose mandatory and optional parameters for the clients.

Using stored queries has lots of advantages:
- separation of responsibilities (some users/developers write queries, others just call/execute them and consume the responses)
- no need to pass long query string over the network 

Stored queries are identified by name, used as `qualified_query_name`, 
and an optional `version` number in [SEMVER](https://semver.org/) style (i.e. `major.minor.patch`).

Usually a `qualified_query_name` has a format like `<namespace>::<query-name>` (e.g. `org.openehr::compositions`). 

If only a partial `version` is supplied or `version` is not supplied at all, the
system must use the latest `version` with the supplied prefix - i.e. if only `major` or `major.minor` 
is used, then the latest query version with supplied prefix will be used.

Queries can be stored or, once stored, their definition can be retrieved 
using the [definition endpoint](definitions.html#definitions-stored-query).


## Common Headers and Query Parameters [/--headers]

All query execution requests SHOULD support at least the following parameters:
- `ehr_id` - used to execute the query within a single EHR context: an EHR identifier taken from EHR.ehr_id.value
- `offset` - used for paging: the row number in result to start result-set from (`0`-based); default `0`
- `fetch` - used for paging: the number of rows to fetch (i.e. limit); default depends on the implementation, but
cannot be combined with [AQL-top](https://specifications.openehr.org/releases/QUERY/latest/AQL.html#_top)
- other parameter(s) to replace placeholder(s) within the query, here generically named `query_parameters` (see [below](#header-query-parameters)).

Related request headers:
- `openEHR-EHR-id` - used to execute the query within a single EHR context: an EHR identifier taken from EHR.ehr_id.value

Related response headers:
- `ETag` - A unique identifier of the resultSet


### About the `ehr_id` parameter

This parameter SHOULD be supplied by clients when executing single EHR queries and MAY be used by the underlying backend 
to perform routing, optimizations or similar. It MUST NOT be supplied for 'population queries' and similar multi-patient queries.

Depending on the needs, clients MAY supply it as a query parameter `ehr_id` or alternatively 
as a request header named `openEHR-EHR-id`.


### Query parameters

Depending on each query definition, various query parameters SHOULD be supported, generically named `query_parameters`
in this specification, but in the real request they will have specific names (e.g. `uid`, `systolic_bp`, etc.) 
according to their names in the query definition.  

Provided query parameters SHOULD NOT be prefixed with `$` sign. Instead, the server will (whenever necessary) 
add the prefix or format queries as valid AQL queries. 

As an example, for the following AQL query 
```
SELECT c/name/value FROM COMPOSITION c WHERE c/uid/value = $uid
```
named as `'myQuery'`, the client can supply the `uid` as a query parameter: 
```
GET {baseUrl}/query/myQuery?uid=90910cf0-66a0-4382-b1f8-c0f27e81b42d::openEHRSys.example.com::1
```

As another example, the request 
```
GET {baseUrl}/query/com.vendor::compositions?temperature_from=36&temperature_unit=Cel
```
will pass query parameters `temperature_from` and `temperature_unit` to the underlying AQL query named `com.vendor::compositions`.

See [AQL-parameters](https://specifications.openehr.org/releases/QUERY/latest/AQL.html#_parameters) specification for more details. 


## Request structure [/--request_structure]

Below is a mostly self-documented AQL query request.

```json
{
    "q": "select o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0004]/value/magnitude as temperature, o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0004]/value/units as unit from EHR[ehr_id/value='554f896d-faca-4513-bddf-664541146308d'] CONTAINS Observation o[openEHR-EHR-OBSERVATION.body_temperature-zn.v1] WHERE o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0004]/value/magnitude > $temperature and o/data[at0002]/events[at0003 and name/value='Any event']/data[at0001]/items[at0.63 and name/value='Symptoms']/value/defining_code/code_string=$chills order by temperature desc fetch 3",
    "query_parameters": {
        "temperature": 38.5,
        "chills": "at0.64"
    }
}
```

<h3>GET vs POST</h3>

Requests based on thr `GET` method have URI length restriction, or some characters might not be allowed and have to be encoded. 
Long queries in the `q` parameter and having a long list of `query_parameters` may add up to reach that limit, 
thus we recommend clients using the `POST` method instead of `GET`.


## Response structure [/--response_structure]

<h3>Metadata</h3>

| Field            | Description |
|------------------|-------------|
|`_href`           | URL of the query executed (only for GET endpoint) |
|`_type`           | Defines type of the serialized object | 
|`_schema_version` | The version of the specification defining the serialized object |
|`_created`        | Result creation time (in the extended ISO8601 format) |
|`_generator`      | Some identifier of the application that generated the result. Useful i.e. for debugging | 
|`_executed_aql`   | The actual query (i.e. AQL) that was executed by the server after exploding the parameters. This attribute is not mandatory, but is useful for debugging |

<h3>Data</h3>

|Field              | Description |
|-------------------|-------------|
| `name`            | Name of a query when registered as a stored query
| `q`               | The AQL which was given in the request 
| `columns`         | Columns are defined by the client provided with the given AQL. I.e. `select c/uid/value as CidValue, c/context/start_time as StartTime from .... ` will give two columns. One columns for CidValue and another for StartTime.
| `columns.name`    | Name of the column. I.e. CidValue or StartTime from the example above, when column alias is not present in the AQL a 0-based column index is used prefixed by a hash sign (i.e. `#0`, `#1`...)
| `columns.path`    | Path from the given AQL of the specified column. I.e. columns CidValue will have path `/uid/value` 
| `rows`            | Ordered list with results.
| `rows.row`        | Each row list of cells. One cell for each column. Content of a cell is `ANY` (i.e. a `OBJECT` in most programming languages) 

<h3>ResultSet example</h3>

Below is a synthesized response with all attributes.

```json
<!-- include(../examples/query_resultset_01.json) -->
```
